为了适应自身的功能需要，Redis 基于 William Pugh 论文中描述的跳跃表进行了以下修改：
		1. 允许重复的 score 值：多个不同的 member 的 score 值可以相同。
2. 进行对比操作时，不仅要检查 score 值，还要检查 member ：当 score 值可以重复时，
单靠 score 值无法判断一个元素的身份，所以需要连 member 域都一并检查才行。
3	. 每个节点都带有一个高度为 1 层的后退指针，用于从表尾方向向表头方向迭代：当执行
ZREVRANGE 或 ZREVRANGEBYSCORE 这类以逆序处理有序集的命令时，就会用到这个属性。

这个修改版的跳跃表由 redis.h/zskiplist 结构定义：
typedef struct zskiplist {
	// 头节点，尾节点
	struct zskiplistNode *header, *tail;
	// 节点数量
	unsigned long length;
	// 目前表内节点的最大层数
	int level;
} zskiplist;

跳跃表的节点由 redis.h/zskiplistNode 定义：
typedef struct zskiplistNode {
	// member 对象
	robj *obj;
	// 分值
	double score;
	// 后退指针
	struct zskiplistNode *backward;
	// 层
	struct zskiplistLevel {
		// 前进指针
		struct zskiplistNode *forward;
		// 这个层跨越的节点数量
		unsigned int span;
	} level[];
} zskiplistNode;
